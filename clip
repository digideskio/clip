#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import logging
import sqlite3
import argparse
from PIL import Image


OUT_FILE_NAME = "db"


class SQLiteHeaderNotFoundException(Exception):
    pass


def clip_init():
    # TODO: post-commit の設定をしているか確認していない
    if os.path.exists(".clip/"):
        print("Already initialized.")
        return

    if not os.path.exists(".git/hooks/"):
        raise FileNotFoundError(".git/hooks/")

    os.mkdir(".clip/")
    logging.info("Created .clip/")
    print("Created .clip/")

    with open(".git/hooks/post-commit", "a") as f:
        f.write("\n./clip -h")
        logging.info("Updated .git/hooks/post-commit")
        print("Updated .git/hooks/post-commit")

    os.chmod(".git/hooks/post-commit", 0o755)


def seek_sqlite_header(data):
    HEADER = ["0x53", "0x51", "0x4c", "0x69", "0x74", "0x65", "0x20", "0x66", "0x6f", "0x72", "0x6d", "0x61", "0x74", "0x20", "0x33"]

    n = 0
    at = 0
    for i in range(len(data)):
        c = data[i]
        if hex(c) == HEADER[n]:
            if n == 0:
                at = i
            n += 1
        elif n > 0:
            n = 0

        if n == len(HEADER) - 1:
            return at

    raise SQLiteHeaderNotFoundException()


def extract_db():
    IN_FILE_NAME = "sample.clip"

    with open(IN_FILE_NAME, "rb") as fi, open(OUT_FILE_NAME, "wb") as fo:
        data = fi.read()

        try:
            at = seek_sqlite_header(data)
        except SQLiteHeaderNotFoundException:
            print("[ERROR] SQLite header not found.")
            sys.exit(1)

        fo.write(bytes(data[at:]))


def extract_illust():
    ILLUST_FILE = "image.png"

    with sqlite3.connect(OUT_FILE_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT ImageData from CanvasPreview")

        with open("./.clip/{0}".format(ILLUST_FILE), "wb") as f:
            f.write(cursor.fetchone()[0])


def parser():
    parser = argparse.ArgumentParser(description="Clip 1.0")

    parser.add_argument(
            "-i", "--init",
            action="store_true",
            help="Create .clip and update post-commit hook")
    parser.add_argument(
            "input-file-name",
            nargs="?",
            help="CLIP STUDIO file")
    parser.add_argument(
            "output-file-name",
            nargs="?",
            help="CLIP STUDIO file")

    return parser.parse_args()


def main():
    args = parser()

    if args.init:
        clip_init()
    elif args.file:
        extract_db()
        extract_illust()
    else:  # TODO: コマンド引数がすべて省略されたとき、ヘルプを表示したい
        sys.exit(1)


if __name__ == "__main__":
    main()
